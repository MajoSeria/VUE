{"ast":null,"code":"export default {\n  name: \"TaskList\",\n  props: {\n    showButton: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      tasks: [] // Almacenamiento local de las tareas traídas de la API\n    };\n  },\n  methods: {\n    // Llamada para obtener las tareas desde la API externa\n    async fetchTasks() {\n      try {\n        const response = await fetch('https://dummyjson.com/todos');\n        const data = await response.json();\n        this.tasks = data.todos; // La API retorna un objeto con la propiedad 'todos' que contiene el array de tareas\n      } catch (error) {\n        console.error('Error al cargar las tareas:', error);\n      }\n    },\n    // Cambiar el estado de una tarea (completada/no completada)\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed;\n    },\n    // Eliminar la tarea seleccionada\n    deleteTask(task) {\n      this.tasks = this.tasks.filter(t => t.id !== task.id);\n    }\n  }\n};","map":{"version":3,"names":["name","props","showButton","type","Boolean","default","data","tasks","methods","fetchTasks","response","fetch","json","todos","error","console","toggleTaskCompletion","task","completed","deleteTask","filter","t","id"],"sources":["src/views/TaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"container mt-4\">\r\n        <h1 class=\"text-center text-primary mb-4 title\">Lista de Tareas</h1>\r\n        <div class=\"col-md-12 text-center\">\r\n            <button v-if=\"showButton\" class=\"btn btn-info mb-3 bi-arrow-clockwise me-2\" @click=\"fetchTasks\">Cargar Tareas</button>\r\n        </div>\r\n        <div v-if=\"tasks.length > 0\">\r\n            <div v-for=\"task in tasks\" :key=\"task.id\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 mb-4\">\r\n                        <div class=\"card mb-3\">\r\n                            <div class=\"card-body d-flex justify-content-between align-items-center\">\r\n                                <div class=\"flex-grow-1 me-2\">\r\n                                    <h5  class=\"card-title m-0 text-decoration-line-through\" :style=\"{ textDecoration: task.completed ? 'line-through' : 'none' }\">{{ task.todo }}</h5>\r\n                                    <span class=\"badge bg-success\">{{ task.completed ? '' : '' }}</span>\r\n                                    </div>\r\n                                    <div class=\"d-flex\">\r\n                                    <button class=\"btn btn-outline-success me-2\" @click=\"toggleTaskCompletion(task)\"><i class=\"bi bi-check-circle\"></i>\r\n                                        {{ task.completed ? '' : '' }}\r\n                                    </button>\r\n                                    <button class=\"btn btn-outline-danger\" @click=\"deleteTask(task)\"><i class=\"bi bi-trash\"></i></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"TaskList\",\r\n\r\n    props: {\r\n        showButton: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tasks: [], // Almacenamiento local de las tareas traídas de la API\r\n        };\r\n    },\r\n    methods: {\r\n    // Llamada para obtener las tareas desde la API externa\r\n        async fetchTasks() {\r\n            try {\r\n                const response = await fetch('https://dummyjson.com/todos');\r\n                const data = await response.json();\r\n                this.tasks = data.todos; // La API retorna un objeto con la propiedad 'todos' que contiene el array de tareas\r\n            } catch (error) {\r\n                console.error('Error al cargar las tareas:', error);\r\n            }\r\n        },\r\n\r\n        // Cambiar el estado de una tarea (completada/no completada)\r\n        toggleTaskCompletion(task) {\r\n            task.completed = !task.completed;\r\n        },\r\n\r\n        // Eliminar la tarea seleccionada\r\n        deleteTask(task) {\r\n            this.tasks = this.tasks.filter((t) => t.id !== task.id);\r\n        },\r\n\r\n    },\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.add-task-container {\r\n    padding: 20px;\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.input-group {\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.task-input {\r\n    flex-grow: 1;\r\n    padding: 8px;\r\n    margin-right: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n}\r\n\r\n.add-button {\r\n    padding: 8px 12px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    cursor: pointer;\r\n}\r\n\r\n.task-list {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.completed {\r\n    text-decoration: line-through;\r\n    color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAkCA;EACAA,IAAA;EAEAC,KAAA;IACAC,UAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EAEAC,KAAA;IACA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,WAAA;MACA;QACA,MAAAC,QAAA,SAAAC,KAAA;QACA,MAAAL,IAAA,SAAAI,QAAA,CAAAE,IAAA;QACA,KAAAL,KAAA,GAAAD,IAAA,CAAAO,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;IAEA;IACAE,qBAAAC,IAAA;MACAA,IAAA,CAAAC,SAAA,IAAAD,IAAA,CAAAC,SAAA;IACA;IAEA;IACAC,WAAAF,IAAA;MACA,KAAAV,KAAA,QAAAA,KAAA,CAAAa,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA,KAAAL,IAAA,CAAAK,EAAA;IACA;EAEA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}