{"ast":null,"code":"import AddTask from '../views/AddTask.vue';\nimport TaskList from '../views/TaskList.vue';\nexport default {\n  name: \"CombinedView\",\n  components: {\n    TaskList,\n    AddTask\n  },\n  data() {\n    return {\n      tasks: [],\n      // Aquí se almacenarán las tareas cargadas de la API\n      loading: false,\n      // Bandera para indicar si las tareas se están cargando\n      error: null // Para almacenar errores\n    };\n  },\n  methods: {\n    // Método para cargar tareas de la API al montar el componente\n    async loadTasks() {\n      this.loading = true;\n      try {\n        const response = await fetch(\"https://dummyjson.com/todos\");\n        if (!response.ok) throw new Error(\"Error al cargar las tareas\");\n        this.tasks = await response.json();\n      } catch (err) {\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Método para agregar una tarea nueva\n    async addTask(newTask) {\n      try {\n        const response = await fetch(\"https://api-ejemplo.com/tasks\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(newTask)\n        });\n        if (!response.ok) throw new Error(\"Error al agregar la tarea\");\n        const addedTask = await response.json();\n        this.tasks.unshift(addedTask); // Añade la nueva tarea al inicio de la lista local\n      } catch (err) {\n        this.error = err.message;\n      }\n    }\n  },\n  mounted() {\n    this.loadTasks(); // Cargar las tareas al montar el componente\n  }\n};\n\n// Esta sección debe permitir agregar tareas nuevas a la vez que extraer las tareas anteriores de la API","map":{"version":3,"names":["AddTask","TaskList","name","components","data","tasks","loading","error","methods","loadTasks","response","fetch","ok","Error","json","err","message","addTask","newTask","method","headers","body","JSON","stringify","addedTask","unshift","mounted"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- Usamos los componentes en el template -->\r\n        <TaskList :showButton=\"false\" />\r\n        <AddTask :showTitle=\"false\" />\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import AddTask from '../views/AddTask.vue';\r\n    import TaskList from '../views/TaskList.vue';\r\n\r\nexport default {\r\n    name: \"CombinedView\",\r\n    components: {\r\n        TaskList,\r\n        AddTask\r\n    },\r\n    data() {\r\n        return {\r\n            tasks: [], // Aquí se almacenarán las tareas cargadas de la API\r\n            loading: false, // Bandera para indicar si las tareas se están cargando\r\n            error: null, // Para almacenar errores\r\n        };\r\n    },\r\n    methods: {\r\n        // Método para cargar tareas de la API al montar el componente\r\n        async loadTasks() {\r\n            this.loading = true;\r\n            try {\r\n                const response = await fetch(\"https://dummyjson.com/todos\");\r\n                if (!response.ok) throw new Error(\"Error al cargar las tareas\");\r\n                this.tasks = await response.json();\r\n            } catch (err) {\r\n                this.error = err.message;\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n\r\n        // Método para agregar una tarea nueva\r\n        async addTask(newTask) {\r\n            try {\r\n                const response = await fetch(\"https://api-ejemplo.com/tasks\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(newTask)\r\n                });\r\n                if (!response.ok) throw new Error(\"Error al agregar la tarea\");\r\n\r\n                const addedTask = await response.json();\r\n                this.tasks.unshift(addedTask); // Añade la nueva tarea al inicio de la lista local\r\n            } catch (err) {\r\n                this.error = err.message;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        this.loadTasks(); // Cargar las tareas al montar el componente\r\n    }\r\n};\r\n\r\n  // Esta sección debe permitir agregar tareas nuevas a la vez que extraer las tareas anteriores de la API\r\n</script>\r\n\r\n<!-- <style scoped>\r\n.add-task-container {\r\n    padding: 20px;\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.input-group {\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.task-input {\r\n    flex-grow: 1;\r\n    padding: 8px;\r\n    margin-right: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n}\r\n\r\n.add-button {\r\n    padding: 8px 12px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    cursor: pointer;\r\n}\r\n\r\n.task-list {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.completed {\r\n    text-decoration: line-through;\r\n    color: gray;\r\n}\r\n</style> -->\r\n"],"mappings":"AAUA,OAAAA,OAAA;AACA,OAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF,QAAA;IACAD;EACA;EACAI,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,OAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,UAAA;MACA,KAAAH,OAAA;MACA;QACA,MAAAI,QAAA,SAAAC,KAAA;QACA,KAAAD,QAAA,CAAAE,EAAA,YAAAC,KAAA;QACA,KAAAR,KAAA,SAAAK,QAAA,CAAAI,IAAA;MACA,SAAAC,GAAA;QACA,KAAAR,KAAA,GAAAQ,GAAA,CAAAC,OAAA;MACA;QACA,KAAAV,OAAA;MACA;IACA;IAEA;IACA,MAAAW,QAAAC,OAAA;MACA;QACA,MAAAR,QAAA,SAAAC,KAAA;UACAQ,MAAA;UACAC,OAAA;YAAA;UAAA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAL,OAAA;QACA;QACA,KAAAR,QAAA,CAAAE,EAAA,YAAAC,KAAA;QAEA,MAAAW,SAAA,SAAAd,QAAA,CAAAI,IAAA;QACA,KAAAT,KAAA,CAAAoB,OAAA,CAAAD,SAAA;MACA,SAAAT,GAAA;QACA,KAAAR,KAAA,GAAAQ,GAAA,CAAAC,OAAA;MACA;IACA;EACA;EACAU,QAAA;IACA,KAAAjB,SAAA;EACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}